{
  "vue": {
    "prefix": "vue",
    "body": [
      "<template>\r",
      "  <div>$1</div>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "export default {\r",
      "  name: '',\r",
      "  data() {\r",
      "    return {}\r",
      "  },\r",
      "  created() {},\r",
      "  methods: {\r",
      "    func() {}\r",
      "  }\r",
      "}\r",
      "</script>\r",
      "\r",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "vue"
  },
  "style": {
    "prefix": "<style>",
    "body": ["<style lang=\"scss\" scoped>\r", "$1\r", "</style>"],
    "description": "style"
  },
  "paging-grid": {
    "prefix": "paging-grid",
    "body": [
      "<template>\r",
      "  <grid-layout\r",
      "    class=\"grid-module\"\r",
      "    @resize=\"({ tableHeight }) => (grid.height = tableHeight)\"\r",
      "  >\r",
      "    <template #searchBar>$1</template>\r",
      "    <template #toolBar>\r",
      "      <el-button type=\"primary\" @click=\"onAdd()\">新增</el-button>\r",
      "    </template>\r",
      "    <template #table>$2</template>\r",
      "    <template #pagination>\r",
      "      <bs-pagination\r",
      "        :total=\"pagging.total\"\r",
      "        :page-size=\"pagging.pageSize\"\r",
      "        :current-page=\"pagging.pageNum\"\r",
      "        @size-change=\"onChangePageSize\"\r",
      "        @current-change=\"onChangeCurrentPage\"\r",
      "      />\r",
      "    </template>\r",
      "    <form-dialog\r",
      "      v-if=\"dialog.show\"\r",
      "      width=\"800px\"\r",
      "      :dialog=\"dialog\"\r",
      "      :visible.sync=\"dialog.show\"\r",
      "      @save-success=\"onSaveSuccess\"\r",
      "    />\r",
      "  </grid-layout>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "import { gridMixin, pagingMixin } from '@/mixin/base'\r",
      "import FormDialog from '@bs/module-demo-collection/src/demo/form-dialog'\r",
      "\r",
      "export default {\r",
      "  name: 'PagingGrid',\r",
      "  components: {\r",
      "    FormDialog\r",
      "  },\r",
      "  mixins: [gridMixin, pagingMixin],\r",
      "  data() {\r",
      "    return {}\r",
      "  },\r",
      "  created() {\r",
      "    this._fetchData()\r",
      "  },\r",
      "  methods: {\r",
      "    async fetchData() {\r",
      "      // const { search, pagging: { pageNum, pageSize } } = this\r",
      "      // const data = await this.\\$api.pagingData({\r",
      "      //   params: {\r",
      "      //     page: pageNum,\r",
      "      //     size: pageSize\r",
      "      //   },\r",
      "      //   data: search\r",
      "      // })\r",
      "      // return data\r",
      "      return {\r",
      "        totalElements: 100,\r",
      "        number: 1,\r",
      "        size: 10,\r",
      "        content: []\r",
      "      }\r",
      "    },\r",
      "    async validateBeforeAdd() {\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async prepareDialogData(row) {\r",
      "      return row\r",
      "    },\r",
      "    async validateBeforeDelete(row) {\r",
      "      console.log(row)\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async deleteData(row) {\r",
      "      console.log(row)\r",
      "      // await this.\\$api.delete({\r",
      "      //   params: {\r",
      "      //     id: row.id\r",
      "      //   }\r",
      "      // })\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>",
      ""
    ],
    "description": "有分页有搜索列表"
  },
  "simple-grid": {
    "prefix": "simple-grid",
    "body": [
      "<template>\r",
      "  <grid-layout\r",
      "    class=\"grid-module\"\r",
      "    @resize=\"({ tableHeight }) => (grid.height = tableHeight)\"\r",
      "  >\r",
      "    <template #toolBar>\r",
      "      <el-button type=\"primary\" @click=\"onAdd()\">新增</el-button>\r",
      "    </template>\r",
      "    <template #table>$1</template>\r",
      "    <form-dialog\r",
      "      v-if=\"dialog.show\"\r",
      "      width=\"800px\"\r",
      "      :dialog=\"dialog\"\r",
      "      :visible.sync=\"dialog.show\"\r",
      "      @save-success=\"onSaveSuccess\"\r",
      "    />\r",
      "  </grid-layout>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "import { gridMixin } from '@/mixin/base'\r",
      "import FormDialog from '@bs/module-demo-collection/src/demo/form-dialog'\r",
      "\r",
      "export default {\r",
      "  name: 'SimpleGrid',\r",
      "  components: {\r",
      "    FormDialog\r",
      "  },\r",
      "  mixins: [gridMixin],\r",
      "  created() {\r",
      "    this._fetchData()\r",
      "  },\r",
      "  methods: {\r",
      "    async fetchData() {\r",
      "      // const data = await this.\\$api.fetchData({\r",
      "      //   params: {\r",
      "      //   }\r",
      "      // })\r",
      "      // return data\r",
      "      return []\r",
      "    },\r",
      "    async validateBeforeAdd() {\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async prepareDialogData(row) {\r",
      "      return row\r",
      "    },\r",
      "    async validateBeforeDelete(row) {\r",
      "      console.log(row)\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async deleteData(row) {\r",
      "      console.log(row)\r",
      "      // await this.\\$api.delete({\r",
      "      //   params: {\r",
      "      //     id: row.id\r",
      "      //   }\r",
      "      // })\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>",
      ""
    ],
    "description": "无分页无搜索列表"
  },
  "simple-search-grid": {
    "prefix": "simple-search-grid",
    "body": [
      "<template>\r",
      "  <grid-layout\r",
      "    class=\"grid-module\"\r",
      "    @resize=\"({ tableHeight }) => (grid.height = tableHeight)\"\r",
      "  >\r",
      "    <template #searchBar>$1</template>\r",
      "    <template #toolBar>\r",
      "      <el-button type=\"primary\" @click=\"onAdd()\">新增</el-button>\r",
      "    </template>\r",
      "    <template #table>$2</template>\r",
      "    <form-dialog\r",
      "      v-if=\"dialog.show\"\r",
      "      width=\"800px\"\r",
      "      :dialog=\"dialog\"\r",
      "      :visible.sync=\"dialog.show\"\r",
      "      @save-success=\"onSaveSuccess\"\r",
      "    />\r",
      "  </grid-layout>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "import { gridMixin } from '@/mixin/base'\r",
      "import FormDialog from '@bs/module-demo-collection/src/demo/form-dialog'\r",
      "\r",
      "export default {\r",
      "  name: 'SimpleSearchGrid',\r",
      "  components: {\r",
      "    FormDialog\r",
      "  },\r",
      "  mixins: [gridMixin],\r",
      "  data() {\r",
      "    return {\r",
      "      search: {\r",
      "        field1: null,\r",
      "        field2: null\r",
      "      }\r",
      "    }\r",
      "  },\r",
      "  created() {\r",
      "    this._fetchData()\r",
      "  },\r",
      "  methods: {\r",
      "    async fetchData() {\r",
      "      // let data = await this.\\$api.fetchData({\r",
      "      //   params: {\r",
      "      //   }\r",
      "      // })\r",
      "      // return data\r",
      "      return []\r",
      "    },\r",
      "    async validateBeforeAdd() {\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async prepareDialogData(row) {\r",
      "      return row\r",
      "    },\r",
      "    async validateBeforeDelete(row) {\r",
      "      console.log(row)\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async deleteData(row) {\r",
      "      console.log(row)\r",
      "      // await this.\\$api.delete({\r",
      "      //   params: {\r",
      "      //     id: row.id\r",
      "      //   }\r",
      "      // })\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>",
      ""
    ],
    "description": "无分页有搜索列表"
  },
  "edit-grid": {
    "prefix": "edit-grid",
    "body": [
      "<template>\r",
      "  <card-grid-layout\r",
      "    class=\"grid-module\"\r",
      "    @resize=\"({ tableHeight }) => (grid.height = tableHeight)\"\r",
      "  >\r",
      "    <template #headerBarRight>\r",
      "      <el-button type=\"primary\" @click=\"handleSave()\">保存</el-button>\r",
      "      <el-button @click=\"clearData()\">清空</el-button>\r",
      "    </template>\r",
      "    <template #table>\r",
      "      <el-form ref=\"form\" :model=\"grid\" :show-message=\"false\">$1</el-form>\r",
      "    </template>\r",
      "  </card-grid-layout>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "import { deepClone } from '@bs/utils'\r",
      "\r",
      "export default {\r",
      "  name: 'EditGrid',\r",
      "  props: {\r",
      "    mode: {\r",
      "      type: Number,\r",
      "      default: 1\r",
      "    }\r",
      "  },\r",
      "  data() {\r",
      "    return {\r",
      "      grid: {\r",
      "        rows: [],\r",
      "        height: null,\r",
      "        loading: false\r",
      "      }\r",
      "    }\r",
      "  },\r",
      "  computed: {\r",
      "    blankData() {\r",
      "      const blankData = this.generateNewData()\r",
      "      delete blankData.editable\r",
      "      return JSON.stringify(blankData)\r",
      "    }\r",
      "  },\r",
      "  created() {\r",
      "    this.init()\r",
      "  },\r",
      "  methods: {\r",
      "    generateNewData() {\r",
      "      const data = {}\r",
      "      return data\r",
      "    },\r",
      "    async fetchData() {\r",
      "      // let data = await this.\\$api.fetchData({\r",
      "      //   params: {\r",
      "      //   }\r",
      "      // })\r",
      "      // return data\r",
      "      return []\r",
      "    },\r",
      "    async init() {\r",
      "      if (this.mode === 1) {\r",
      "        this.grid.rows = new Array(this.uiSetting.editTableRowsCount)\r",
      "          .fill()\r",
      "          .map(() => this.generateNewData())\r",
      "      } else {\r",
      "        this.grid.rows = (await this.fetchData()).map(item => ({\r",
      "          ...item,\r",
      "          editable: false\r",
      "        }))\r",
      "      }\r",
      "    },\r",
      "    async handleRowClick(row) {\r",
      "      if (this.mode === 3) return\r",
      "      if (!row.editable) {\r",
      "        this.grid.rows.forEach(item => {\r",
      "          item.editable = false\r",
      "        })\r",
      "        row.editable = true\r",
      "      }\r",
      "    },\r",
      "\r",
      "    // 字段联动\r",
      "    handleField2Change(item, row) {\r",
      "      row.field8 = `我选了\\${item}`\r",
      "    },\r",
      "    handleAdd() {\r",
      "      this.grid.rows.push(this.generateNewData())\r",
      "    },\r",
      "    handleDelete(index) {\r",
      "      this.\\$confirm2\r",
      "        .warning('确定删除当前数据吗？')\r",
      "        .then(() => {\r",
      "          this.grid.rows.splice(index, 1)\r",
      "        })\r",
      "        .catch(() => {})\r",
      "    },\r",
      "    validate() {\r",
      "      let isValid = true\r",
      "      const effectiveData = []\r",
      "      const length = this.grid.rows.length\r",
      "      for (let index = 0; index < length; index++) {\r",
      "        const row = this.grid.rows[index]\r",
      "        const bizData = deepClone(row)\r",
      "        delete bizData.editable\r",
      "        if (this.blankData !== JSON.stringify(bizData)) {\r",
      "          const validMap = new Map(\r",
      "            [\r",
      "              [\r",
      "                !row.field1,\r",
      "                this.\\$t('validator.required', { name: '文本类型' })\r",
      "              ],\r",
      "              [!row.field2, this.\\$t('validator.required', { name: '枚举类型' })]\r",
      "            ].reverse()\r",
      "          )\r",
      "          if (validMap.has(true)) {\r",
      "            isValid = false\r",
      "            this.\\$tip.warning(`第\\${index + 1}行数据，\\${validMap.get(true)}`)\r",
      "            break\r",
      "          }\r",
      "          effectiveData.push(row)\r",
      "        }\r",
      "      }\r",
      "      if (!isValid) {\r",
      "        this.\\$el.scrollIntoView() // 滚动到视线范围内\r",
      "        this.\\$refs.form.validate() // 让控件出现红色边框\r",
      "      }\r",
      "      if (isValid && effectiveData.length === 0) {\r",
      "        isValid = false\r",
      "        this.\\$tip.warning('请添加数据')\r",
      "      }\r",
      "      return {\r",
      "        isValid,\r",
      "        effectiveData: effectiveData.map((item, index) => ({\r",
      "          ...item,\r",
      "          sortNo: index + 1\r",
      "        }))\r",
      "      }\r",
      "    },\r",
      "    handleSave() {\r",
      "      const { isValid, effectiveData } = this.validate()\r",
      "      if (isValid) {\r",
      "        console.log(effectiveData)\r",
      "      }\r",
      "    },\r",
      "    clearData() {\r",
      "      this.grid.rows = new Array(this.uiSetting.editTableRowsCount)\r",
      "        .fill()\r",
      "        .map(() => this.generateNewData())\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>",
      ""
    ],
    "description": "可编辑列表"
  },
  "form-dialog": {
    "prefix": "form-dialog",
    "body": [
      "<template>\r",
      "  <bs-dialog v-bind=\"\\$attrs\" v-on=\"\\$listeners\">\r",
      "    <template #title>{{ dialogMode.title }}</template>\r",
      "$1",
      "    <template v-if=\"!isViewMode\" #footer>\r",
      "      <el-button @click=\"\\$emit('update:visible', false)\">取消</el-button>\r",
      "      <el-button :loading=\"loading\" type=\"primary\" @click=\"onSave\">\r",
      "        保存\r",
      "      </el-button>\r",
      "    </template>\r",
      "  </bs-dialog>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "// import dayjs from 'dayjs'\r",
      "import { formDialogMixin } from '@/mixin/base'\r",
      "\r",
      "export default {\r",
      "  name: 'FormDialog',\r",
      "  mixins: [formDialogMixin],\r",
      "  data() {\r",
      "    return {}\r",
      "  },\r",
      "  created() {\r",
      "    this.initData()\r",
      "  },\r",
      "  methods: {\r",
      "    async addModel(dialogData) {\r",
      "      console.log(dialogData)\r",
      "      // this.formData.field1 = dialogData.field1\r",
      "      return this.formData\r",
      "    },\r",
      "    async updateModel(dialogData) {\r",
      "      // let data = await this.\\$api.queryOne({\r",
      "      //   params: {\r",
      "      //     id: dialogData.id\r",
      "      //   }\r",
      "      // })\r",
      "      // return data\r",
      "      return Object.assign({}, dialogData)\r",
      "    },\r",
      "    async viewModel(dialogData) {\r",
      "      // let data = await this.\\$api.queryOne({\r",
      "      //   params: {\r",
      "      //     id: dialogData.id\r",
      "      //   }\r",
      "      // })\r",
      "      // return data\r",
      "      return Object.assign({}, dialogData)\r",
      "    },\r",
      "    async validateBeforeAddSave() {\r",
      "      // .....\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      // return Promise.resolve()\r",
      "    },\r",
      "    async validateBeforeUpdateSave() {\r",
      "      // .....\r",
      "      // 校验失败，则return Promise.reject(new Error())\r",
      "      return Promise.resolve()\r",
      "    },\r",
      "    async addData() {\r",
      "      // await this.\\$api.add({\r",
      "      //   data: {\r",
      "      //     ...this.data\r",
      "      //   }\r",
      "      // })\r",
      "    },\r",
      "    async updateData() {\r",
      "      // let { fid,field1,field2,field3 } = this.data\r",
      "      // await this.\\$api.modify({\r",
      "      //   data: {\r",
      "      //     fid,\r",
      "      //     field1,\r",
      "      //     field2,\r",
      "      //     field3\r",
      "      //   }\r",
      "      // })\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>",
      ""
    ],
    "description": "填写表单弹窗"
  }
}
